var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing-1","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"The BioJulia organisation has a set of contribution guidelines which apply to all BioJulia projects. These guidelines are available here and it is recommended all new contributors read these guidelines before opening a pull request.","category":"page"},{"location":"contributing/#Making-a-contribution-1","page":"Contributing","title":"Making a contribution","text":"","category":"section"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"If you're interested in adding functionality to MicrobiomePlots.jl, please feel free to open an issue or a pull request (PR) against the master branch. If you're not yet ready for that, you can also ask questions/start a discussion in the Bio.jl gitter channel.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Work-in-progress PRs are fine, as discussion about approach and code review can happen in the PR.","category":"page"},{"location":"contributing/#","page":"Contributing","title":"Contributing","text":"Before merging, any new code should be unit tested and have docs for newly exported functions, but if you don't know how to do this, don't worry, we can help!","category":"page"},{"location":"#MicrobiomePlots.jl-1","page":"Home","title":"MicrobiomePlots.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Plotting functionality for Microbiome.jl using Plots.jl recipes","category":"page"},{"location":"recipes/#Recipes-Docs-1","page":"Recipes","title":"Recipes Docs","text":"","category":"section"},{"location":"recipes/#Abundances-1","page":"Recipes","title":"Abundances","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Some convenience plotting types are available using MicrobiomePlots, Which also re-exports everything in StatsPlots","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"ENV[\"GKSwstype\"] = \"100\" # hide\nusing Microbiome\nusing MicrobiomePlots\nusing Distributions\nusing Random # hide\nRandom.seed!(1) # hide\n\n# add some high abundance bugs to be a bit more realistic\nfunction spikein(spikes, y, x)\n    m = rand(LogNormal(), y, x)\n    for s in spikes\n        m[s, :] = rand(LogNormal(3., 0.5), x)'\n    end\n    return m\nend\n\n# 100 species in 10 samples, with every 10th bug a bit more abundant\nbugs = spikein(1:10:100, 100, 10)\n\nabund = abundancetable(bugs,\n    [\"sample_$x\" for x in 1:10],\n    [\"species_$x\" for x in 1:100]);\n\nrelativeabundance!(abund)\nabundanceplot(abund, xticks=(1:10, samplenames(abund)), xrotation=45)\n\nsavefig(\"abund1.png\") # hide","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"(Image: \"first abundance plot\")","category":"page"},{"location":"recipes/#Metadata-1","page":"Recipes","title":"Metadata","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Perhaps you have some metadata that you'd like to add as well:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"labels = [\"a\",\"a\",\"b\",\"a\",\"b\",\"b\",\"b\",\"b\",\"a\",\"a\"]\n\nplot(\n    abundanceplot(abund, xticks=(1:10, samplenames(abund)), xrotation=45),\n    plot(annotationbar(labels)),\n    layout=grid(2,1, heights=[0.9,0.1]))\n\nsavefig(\"abund2.png\") # hide","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"(Image: \"annotated abundance plot\")","category":"page"},{"location":"recipes/#Distances-1","page":"Recipes","title":"Distances","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"To plot this, use the MDS or PCA implementations from MultivariateStats and plotting functionality from StatsPlots.","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"using MultivariateStats\nusing Distances\n\n# Note - once [SpatialEcology #36](https://github.com/EcoJulia/SpatialEcology.jl/pull/36)\n# is released, one will be able to do `pairwise(BrayCurtis(), abund)` directly\ndm = pairwise(BrayCurtis(), occurrences(abund))\n\nmds = fit(MDS, dm, distances=true)\n\nplot(mds)","category":"page"},{"location":"recipes/#Optimal-Leaf-Ordering-1","page":"Recipes","title":"Optimal Leaf Ordering","text":"","category":"section"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"I also wrote a plotting recipe for making treeplots for Hclust objects from the Clustering.jl package, and the recipe for plotting was moved into StatsPlots:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"using Clustering\nusing Distances\nusing MicrobiomePlots\nusing Random\n\nn = 40\n\nmat = zeros(Int, n, n)\n# create banded matrix\nfor i in 1:n\n    last = minimum([i+Int(floor(n/5)), n])\n    for j in i:last\n        mat[i,j] = 1\n    end\nend\n\n# randomize order\nmat = mat[:, randperm(n)]\ndm = pairwise(Euclidean(), mat, dims=2)\n\n# normal ordering\nhcl1 = hclust(dm, linkage=:average)\nplot(\n    plot(hcl1, xticks=false),\n    heatmap(mat[:, hcl1.order], colorbar=false, xticks=(1:n, [\"$i\" for i in hcl1.order])),\n    layout=grid(2,1, heights=[0.2,0.8])\n    )","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Compare to:","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"# optimal ordering\nhcl2 = hclust(dm, linkage=:average, branchorder=:optimal)\nplot(\n    plot(hcl2, xticks=false),\n    heatmap(mat[:, hcl2.order], colorbar=false, xticks=(1:n, [\"$i\" for i in hcl2.order])),\n    layout=grid(2,1, heights=[0.2,0.8])\n    )","category":"page"},{"location":"recipes/#","page":"Recipes","title":"Recipes","text":"Modules = [MicrobiomePlots]\nPrivate = false","category":"page"},{"location":"recipes/#MicrobiomePlots.AnnotationBar","page":"Recipes","title":"MicrobiomePlots.AnnotationBar","text":"AnnotationBar(::Array{<:Color,1})\n\nArray of colors for plotting a grid. Use plot(::AnnotationBar; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"recipes/#MicrobiomePlots.annotationbar-Tuple{AbstractArray{#s13,1} where #s13<:Color}","page":"Recipes","title":"MicrobiomePlots.annotationbar","text":"annotationbar(colors::AbstractArray{<:Color,1})\nannotationbar(labels::AbstractArray{<:AbstractString,1})\nannotationbar(labels::AbstractArray{<:AbstractString,1}, colormap::Dict{<:AbstractString,<:Color})\nannotationbar(labels::AbstractArray{<:AbstractString,1}, colors::AbstractArray{<:Color,1})\n\nCreate an AnnotationBar from a vector of colors or a vector of labels (Strings).\n\nA vector of Colors will be used directly to create an AnnotationBar\nFor an array of Strings, each unique value will be assigned a random color from Colors.color_names.\nA vector of labels may be passed with a Dict with keys for each label mapping to a Color value.\nA vector of labels and colors may be used.\nIf the lengths of these vectors are the same, the colors will be used to create an AnnotationBar\nIf the length of labels is longer than the length of colors, each unique label will be assigned to one of the colors\n\n\n\n\n\n","category":"method"}]
}
